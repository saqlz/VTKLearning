// LoadAndShowDCM.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"

/*=========================================================================

Program:   Visualization Toolkit
Module:    ImageSlicing.cxx

Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
All rights reserved.
See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

This software is distributed WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
//
// This example shows how to load a 3D image into VTK and then reformat
// that image into a different orientation for viewing.  It uses
// vtkImageReslice for reformatting the image, and uses vtkImageActor
// and vtkInteractorStyleImage to display the image.  This InteractorStyle
// forces the camera to stay perpendicular to the XY plane.
//
// Thanks to David Gobbi of Atamai Inc. for contributing this example.
//

#include "vtkSmartPointer.h"
#include "vtkImageReader2.h"
#include "vtkMatrix4x4.h"
#include "vtkImageReslice.h"
#include "vtkLookupTable.h"
#include "vtkImageMapToColors.h"
#include "vtkImageActor.h"
#include "vtkRenderer.h"
#include "vtkRenderWindow.h"
#include "vtkRenderWindowInteractor.h"
#include "vtkInteractorStyleImage.h"
#include "vtkCommand.h"
#include "vtkImageData.h"
#include "vtkImageMapper3D.h"
#include "vtkStreamingDemandDrivenPipeline.h"
#include "vtkInformation.h"

// The mouse motion callback, to turn "Slicing" on and off
class vtkImageInteractionCallback : public vtkCommand
{
public:

    static vtkImageInteractionCallback *New() {
        return new vtkImageInteractionCallback;
    };

    vtkImageInteractionCallback() {
        Slicing = 0;
        ImageReslice = 0;
        Interactor = 0;
    };

    void SetImageReslice(vtkImageReslice *reslice) {
        ImageReslice = reslice;
    };

    vtkImageReslice *GetImageReslice() {
        return ImageReslice;
    };

    void SetInteractor(vtkRenderWindowInteractor *interactor) {
        Interactor = interactor;
    };

    vtkRenderWindowInteractor *GetInteractor() {
        return Interactor;
    };

    void Execute(vtkObject *, unsigned long event, void *) VTK_OVERRIDE
    {
        vtkRenderWindowInteractor *interactor = GetInteractor();

        int lastPos[2];
        interactor->GetLastEventPosition(lastPos);
        int currPos[2];
        interactor->GetEventPosition(currPos);

        if (event == vtkCommand::LeftButtonPressEvent)
        {
            Slicing = 1;
        }
        else if (event == vtkCommand::LeftButtonReleaseEvent)
        {
            Slicing = 0;
        }
        else if (event == vtkCommand::MouseMoveEvent)
        {
            if (Slicing)
            {
                vtkImageReslice *reslice = ImageReslice;

                // Increment slice position by deltaY of mouse
                int deltaY = lastPos[1] - currPos[1];

                reslice->Update();
                double sliceSpacing = reslice->GetOutput()->GetSpacing()[2];
                vtkMatrix4x4 *matrix = reslice->GetResliceAxes();
                // move the center point that we are slicing through
                double point[4];
                double center[4];
                point[0] = 0.0;
                point[1] = 0.0;
                point[2] = sliceSpacing * deltaY;
                point[3] = 1.0;
                matrix->MultiplyPoint(point, center);
                matrix->SetElement(0, 3, center[0]);
                matrix->SetElement(1, 3, center[1]);
                matrix->SetElement(2, 3, center[2]);
                interactor->Render();
            }
            else
            {
                vtkInteractorStyle *style = vtkInteractorStyle::SafeDownCast(
                    interactor->GetInteractorStyle());
                if (style)
                {
                    style->OnMouseMove();
                }
            }
        }
    };

private:

    // Actions (slicing only, for now)
    int Slicing;

    // Pointer to vtkImageReslice
    vtkImageReslice *ImageReslice;

    // Pointer to the interactor
    vtkRenderWindowInteractor *Interactor;
};

// The program entry point
int main()
{
    //Step0. 加Load DICOM Data
    //Step0. 加载DIOCM原始数据
    std::string sPath = "E:\\Images\\Test\\";
    vtkSmartPointer<vtkDICOMImageReader> reader = vtkSmartPointer<vtkDICOMImageReader>::New();
    reader->SetDataByteOrderToLittleEndian();
    reader->SetDirectoryName(sPath.c_str());
    reader->Update();
    int extent[6];
    double spacing[3];
    double origin[3];


    reader->GetOutputInformation(0)->Get(vtkStreamingDemandDrivenPipeline::WHOLE_EXTENT(), extent);
    reader->GetOutput()->GetSpacing(spacing);
    reader->GetOutput()->GetOrigin(origin);

    double center[3];
    center[0] = origin[0] + spacing[0] * 0.5 * (extent[0] + extent[1]);
    center[1] = origin[1] + spacing[1] * 0.5 * (extent[2] + extent[3]);
    center[2] = origin[2] + spacing[2] * 0.5 * (extent[4] + extent[5]);

    // Matrices for axial, coronal, sagittal, oblique view orientations
    //static double axialElements[16] = {
    //         1, 0, 0, 0,
    //         0, 1, 0, 0,
    //         0, 0, 1, 0,
    //         0, 0, 0, 1 };

    //static double coronalElements[16] = {
    //         1, 0, 0, 0,
    //         0, 0, 1, 0,
    //         0,-1, 0, 0,
    //         0, 0, 0, 1 };

    static double sagittalElements[16] = {
        0, 0,-1, 0,
        1, 0, 0, 0,
        0,-1, 0, 0,
        0, 0, 0, 1 };

    //static double obliqueElements[16] = {
    //         1, 0, 0, 0,
    //         0, 0.866025, -0.5, 0,
    //         0, 0.5, 0.866025, 0,
    //         0, 0, 0, 1 };

    // Set the slice orientation
    vtkSmartPointer<vtkMatrix4x4> resliceAxes =
        vtkSmartPointer<vtkMatrix4x4>::New();
    resliceAxes->DeepCopy(sagittalElements);
    // Set the point through which to slice
    resliceAxes->SetElement(0, 3, center[0]);
    resliceAxes->SetElement(1, 3, center[1]);
    resliceAxes->SetElement(2, 3, center[2]);

    // Extract a slice in the desired orientation
    vtkSmartPointer<vtkImageReslice> reslice =
        vtkSmartPointer<vtkImageReslice>::New();
    reslice->SetInputConnection(reader->GetOutputPort());
    reslice->SetOutputDimensionality(2);
    reslice->SetResliceAxes(resliceAxes);
    reslice->SetInterpolationModeToLinear();

    // Create a greyscale lookup table
    vtkSmartPointer<vtkLookupTable> table =
        vtkSmartPointer<vtkLookupTable>::New();
    table->SetRange(0, 2000); // image intensity range
    table->SetValueRange(0.0, 1.0); // from black to white
    table->SetSaturationRange(0.0, 0.0); // no color saturation
    table->SetRampToLinear();
    table->Build();

    // Map the image through the lookup table
    vtkSmartPointer<vtkImageMapToColors> color =
        vtkSmartPointer<vtkImageMapToColors>::New();
    color->SetLookupTable(table);
    color->SetInputConnection(reslice->GetOutputPort());

    // Display the image
    vtkSmartPointer<vtkImageActor> actor =
        vtkSmartPointer<vtkImageActor>::New();
    actor->GetMapper()->SetInputConnection(color->GetOutputPort());

    vtkSmartPointer<vtkRenderer> renderer =
        vtkSmartPointer<vtkRenderer>::New();
    renderer->AddActor(actor);

    vtkSmartPointer<vtkRenderWindow> window =
        vtkSmartPointer<vtkRenderWindow>::New();
    window->AddRenderer(renderer);

    // Set up the interaction
    vtkSmartPointer<vtkInteractorStyleImage> imageStyle =
        vtkSmartPointer<vtkInteractorStyleImage>::New();
    vtkSmartPointer<vtkRenderWindowInteractor> interactor =
        vtkSmartPointer<vtkRenderWindowInteractor>::New();
    interactor->SetInteractorStyle(imageStyle);
    window->SetInteractor(interactor);
    window->Render();

    vtkSmartPointer<vtkImageInteractionCallback> callback =
        vtkSmartPointer<vtkImageInteractionCallback>::New();
    callback->SetImageReslice(reslice);
    callback->SetInteractor(interactor);

    imageStyle->AddObserver(vtkCommand::MouseMoveEvent, callback);
    imageStyle->AddObserver(vtkCommand::LeftButtonPressEvent, callback);
    imageStyle->AddObserver(vtkCommand::LeftButtonReleaseEvent, callback);

    // Start interaction
    // The Start() method doesn't return until the window is closed by the user
    interactor->Start();

    return EXIT_SUCCESS;
}



    double color[256][3] = { { 0 / 255.0, 0 / 255.0, 0 / 255.0 },
    { 4 / 255.0, 0 / 255.0, 2 / 255.0 },
    { 8 / 255.0, 0 / 255.0, 4 / 255.0 },
    { 12 / 255.0, 0 / 255.0, 6 / 255.0 },
    { 16 / 255.0, 0 / 255.0, 8 / 255.0 },
    { 20 / 255.0, 0 / 255.0, 10 / 255.0 },
    { 24 / 255.0, 0 / 255.0, 12 / 255.0 },
    { 28 / 255.0, 0 / 255.0, 14 / 255.0 },
    { 32 / 255.0, 0 / 255.0, 16 / 255.0 },
    { 36 / 255.0, 0 / 255.0, 18 / 255.0 },
    { 40 / 255.0, 0 / 255.0, 20 / 255.0 },
    { 44 / 255.0, 0 / 255.0, 22 / 255.0 },
    { 48 / 255.0, 0 / 255.0, 24 / 255.0 },
    { 52 / 255.0, 0 / 255.0, 26 / 255.0 },
    { 56 / 255.0, 0 / 255.0, 28 / 255.0 },
    { 60 / 255.0, 0 / 255.0, 30 / 255.0 },
    { 64 / 255.0, 0 / 255.0, 32 / 255.0 },
    { 68 / 255.0, 0 / 255.0, 34 / 255.0 },
    { 72 / 255.0, 0 / 255.0, 36 / 255.0 },
    { 76 / 255.0, 0 / 255.0, 38 / 255.0 },
    { 80 / 255.0, 0 / 255.0, 40 / 255.0 },
    { 84 / 255.0, 0 / 255.0, 42 / 255.0 },
    { 88 / 255.0, 0 / 255.0, 44 / 255.0 },
    { 92 / 255.0, 0 / 255.0, 46 / 255.0 },
    { 96 / 255.0, 0 / 255.0, 48 / 255.0 },
    { 100 / 255.0, 0 / 255.0, 50 / 255.0 },
    { 104 / 255.0, 0 / 255.0, 52 / 255.0 },
    { 108 / 255.0, 0 / 255.0, 54 / 255.0 },
    { 112 / 255.0, 0 / 255.0, 56 / 255.0 },
    { 116 / 255.0, 0 / 255.0, 58 / 255.0 },
    { 120 / 255.0, 0 / 255.0, 60 / 255.0 },
    { 124 / 255.0, 0 / 255.0, 62 / 255.0 },
    { 128 / 255.0, 0 / 255.0, 64 / 255.0 },
    { 132 / 255.0, 0 / 255.0, 62 / 255.0 },
    { 136 / 255.0, 0 / 255.0, 60 / 255.0 },
    { 140 / 255.0, 0 / 255.0, 58 / 255.0 },
    { 144 / 255.0, 0 / 255.0, 56 / 255.0 },
    { 148 / 255.0, 0 / 255.0, 54 / 255.0 },
    { 152 / 255.0, 0 / 255.0, 52 / 255.0 },
    { 156 / 255.0, 0 / 255.0, 50 / 255.0 },
    { 160 / 255.0, 0 / 255.0, 48 / 255.0 },
    { 164 / 255.0, 0 / 255.0, 46 / 255.0 },
    { 168 / 255.0, 0 / 255.0, 44 / 255.0 },
    { 172 / 255.0, 0 / 255.0, 42 / 255.0 },
    { 176 / 255.0, 0 / 255.0, 40 / 255.0 },
    { 180 / 255.0, 0 / 255.0, 38 / 255.0 },
    { 184 / 255.0, 0 / 255.0, 36 / 255.0 },
    { 188 / 255.0, 0 / 255.0, 34 / 255.0 },
    { 192 / 255.0, 0 / 255.0, 32 / 255.0 },
    { 196 / 255.0, 0 / 255.0, 30 / 255.0 },
    { 200 / 255.0, 0 / 255.0, 28 / 255.0 },
    { 204 / 255.0, 0 / 255.0, 26 / 255.0 },
    { 208 / 255.0, 0 / 255.0, 24 / 255.0 },
    { 212 / 255.0, 0 / 255.0, 22 / 255.0 },
    { 216 / 255.0, 0 / 255.0, 20 / 255.0 },
    { 220 / 255.0, 0 / 255.0, 18 / 255.0 },
    { 224 / 255.0, 0 / 255.0, 16 / 255.0 },
    { 228 / 255.0, 0 / 255.0, 14 / 255.0 },
    { 232 / 255.0, 0 / 255.0, 12 / 255.0 },
    { 236 / 255.0, 0 / 255.0, 10 / 255.0 },
    { 240 / 255.0, 0 / 255.0, 8 / 255.0 },
    { 244 / 255.0, 0 / 255.0, 6 / 255.0 },
    { 248 / 255.0, 0 / 255.0, 4 / 255.0 },
    { 252 / 255.0, 0 / 255.0, 2 / 255.0 },
    { 255 / 255.0, 0 / 255.0, 0 / 255.0 },
    { 247 / 255.0, 8 / 255.0, 0 / 255.0 },
    { 239 / 255.0, 16 / 255.0, 0 / 255.0 },
    { 231 / 255.0, 24 / 255.0, 0 / 255.0 },
    { 223 / 255.0, 32 / 255.0, 0 / 255.0 },
    { 215 / 255.0, 40 / 255.0, 0 / 255.0 },
    { 207 / 255.0, 48 / 255.0, 0 / 255.0 },
    { 199 / 255.0, 56 / 255.0, 0 / 255.0 },
    { 191 / 255.0, 64 / 255.0, 0 / 255.0 },
    { 183 / 255.0, 72 / 255.0, 0 / 255.0 },
    { 175 / 255.0, 80 / 255.0, 0 / 255.0 },
    { 167 / 255.0, 88 / 255.0, 0 / 255.0 },
    { 159 / 255.0, 96 / 255.0, 0 / 255.0 },
    { 151 / 255.0, 104 / 255.0, 0 / 255.0 },
    { 143 / 255.0, 112 / 255.0, 0 / 255.0 },
    { 135 / 255.0, 120 / 255.0, 0 / 255.0 },
    { 127 / 255.0, 128 / 255.0, 0 / 255.0 },
    { 119 / 255.0, 136 / 255.0, 0 / 255.0 },
    { 111 / 255.0, 144 / 255.0, 0 / 255.0 },
    { 103 / 255.0, 152 / 255.0, 0 / 255.0 },
    { 95 / 255.0, 160 / 255.0, 0 / 255.0 },
    { 87 / 255.0, 168 / 255.0, 0 / 255.0 },
    { 79 / 255.0, 176 / 255.0, 0 / 255.0 },
    { 71 / 255.0, 184 / 255.0, 0 / 255.0 },
    { 63 / 255.0, 192 / 255.0, 0 / 255.0 },
    { 55 / 255.0, 200 / 255.0, 0 / 255.0 },
    { 47 / 255.0, 208 / 255.0, 0 / 255.0 },
    { 39 / 255.0, 216 / 255.0, 0 / 255.0 },
    { 31 / 255.0, 224 / 255.0, 0 / 255.0 },
    { 23 / 255.0, 232 / 255.0, 0 / 255.0 },
    { 15 / 255.0, 240 / 255.0, 0 / 255.0 },
    { 7 / 255.0, 248 / 255.0, 0 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 0 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 4 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 8 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 12 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 16 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 20 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 24 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 28 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 32 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 36 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 40 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 44 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 48 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 52 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 56 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 60 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 64 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 68 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 72 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 76 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 80 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 84 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 88 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 92 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 96 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 100 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 104 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 108 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 112 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 116 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 120 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 124 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 128 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 132 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 136 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 140 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 144 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 148 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 152 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 156 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 160 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 164 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 168 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 172 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 176 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 180 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 184 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 188 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 192 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 196 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 200 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 204 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 208 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 212 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 216 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 220 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 224 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 228 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 232 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 236 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 240 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 244 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 248 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 252 / 255.0 },
    { 0 / 255.0, 255 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 253 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 251 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 249 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 247 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 245 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 243 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 241 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 239 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 237 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 235 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 233 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 231 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 229 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 227 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 225 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 223 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 221 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 219 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 217 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 215 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 213 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 211 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 209 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 207 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 205 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 203 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 201 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 199 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 197 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 195 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 193 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 192 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 189 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 186 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 183 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 180 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 177 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 174 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 171 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 168 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 165 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 162 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 159 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 156 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 153 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 150 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 147 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 144 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 141 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 138 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 135 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 132 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 129 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 126 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 123 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 120 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 117 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 114 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 111 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 108 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 105 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 102 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 99 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 96 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 93 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 90 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 87 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 84 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 81 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 78 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 75 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 72 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 69 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 66 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 63 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 60 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 57 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 54 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 51 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 48 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 45 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 42 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 39 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 36 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 33 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 30 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 27 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 24 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 21 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 18 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 15 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 12 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 9 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 6 / 255.0, 255 / 255.0 },
    { 0 / 255.0, 3 / 255.0, 255 / 255.0 } };

    